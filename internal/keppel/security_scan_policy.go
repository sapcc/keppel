// SPDX-FileCopyrightText: 2023 SAP SE or an SAP affiliate company
// SPDX-License-Identifier: Apache-2.0

package keppel

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"time"

	"github.com/sapcc/go-bits/errext"
	"github.com/sapcc/go-bits/regexpext"

	"github.com/sapcc/keppel/internal/models"
	"github.com/sapcc/keppel/internal/trivy"
)

// SecurityScanPolicy is a policy enabling user-defined adjustments to
// vulnerability reports generated by Trivy.
type SecurityScanPolicy struct {
	//NOTE: We have code that uses slices.Contains() to locate policies. Be careful
	// when adding fields that cannot be meaningfully compared with the == operator.
	ManagingUserName          string                   `json:"managed_by_user,omitempty"`
	RepositoryRx              regexpext.BoundedRegexp  `json:"match_repository"`
	NegativeRepositoryRx      regexpext.BoundedRegexp  `json:"except_repository,omitempty"`
	VulnerabilityIDRx         regexpext.BoundedRegexp  `json:"match_vulnerability_id"`
	NegativeVulnerabilityIDRx regexpext.BoundedRegexp  `json:"except_vulnerability_id,omitempty"`
	ExceptFixReleased         bool                     `json:"except_fix_released,omitempty"`
	Action                    SecurityScanPolicyAction `json:"action"`
}

// SecurityScanPolicyAction appears in type SecurityScanPolicy.
type SecurityScanPolicyAction struct {
	Assessment string                     `json:"assessment"`
	Ignore     bool                       `json:"ignore,omitempty"`
	Severity   models.VulnerabilityStatus `json:"severity,omitempty"`
}

// String returns the JSON representation of this policy (for use in log and
// error messages).
func (p SecurityScanPolicy) String() string {
	// we only obtain SecurityScanPolicy instances through unmarshalling, so it is
	// safe to assume that they will marshal without error
	buf, err := json.Marshal(p)
	if err != nil {
		panic(err.Error())
	}
	return string(buf)
}

// Validate returns errors if this policy is invalid.
//
// When constructing error messages, `path` is prepended to all field names.
// This allows identifying the location of the policy within a larger data structure.
func (p SecurityScanPolicy) Validate(path string) (errs errext.ErrorSet) {
	if path == "" {
		path = "policy"
	}

	if p.RepositoryRx == "" {
		errs.Addf(`%s must have the "match_repository" attribute`, path)
	}
	if p.VulnerabilityIDRx == "" {
		errs.Addf(`%s must have the "match_vulnerability_id" attribute`, path)
	}

	if p.Action.Assessment == "" {
		errs.Addf(`%s.action must have the "assessment" attribute`, path)
	}
	if len(p.Action.Assessment) > 1024 {
		errs.Addf(`%s.action.assessment cannot be larger than 1 KiB`, path)
	}

	if p.Action.Ignore {
		if p.Action.Severity != "" {
			errs.Addf(`%s.action cannot have the "severity" attribute when "ignore" is set`, path)
		}
	} else {
		if p.Action.Severity == "" {
			errs.Addf(`%s.action must have the "severity" attribute when "ignore" is not set`, path)
		} else if !isSeverityKnownByTrivy(p.Action.Severity) {
			errs.Addf(`%s.action.severity contains the invalid value %q`, path, p.Action.Severity)
		}
	}

	return errs
}

func isSeverityKnownByTrivy(severity models.VulnerabilityStatus) bool {
	// We don't allow downgrading a severity to "Unknown" through a policy.
	if severity == models.UnknownSeverity {
		return false
	}
	for _, vulnStatus := range trivy.MapToTrivySeverity {
		if severity == vulnStatus {
			return true
		}
	}
	return false
}

// VulnerabilityStatus returns the status that this policy forces for matching
// vulnerabilities in matching repos.
func (p SecurityScanPolicy) VulnerabilityStatus() models.VulnerabilityStatus {
	//NOTE: Validate() ensures that either `Action.Ignore` or `Action.Severity` is set.
	if p.Action.Ignore {
		return models.CleanSeverity
	}
	return p.Action.Severity
}

// MatchesRepository evaluates the repository regexes in this policy.
func (p SecurityScanPolicy) MatchesRepository(repo models.Repository) bool {
	//NOTE: NegativeRepositoryRx takes precedence and is thus evaluated first.
	if p.NegativeRepositoryRx != "" && p.NegativeRepositoryRx.MatchString(repo.Name) {
		return false
	}
	return p.RepositoryRx.MatchString(repo.Name)
}

// MatchesVulnerability evaluates the vulnerability regexes and checkin this policy.
func (p SecurityScanPolicy) MatchesVulnerability(vuln trivy.DetectedVulnerability) bool {
	if p.ExceptFixReleased && vuln.FixIsReleased() {
		return false
	}

	//NOTE: NegativeRepositoryRx takes precedence and is thus evaluated first.
	if p.NegativeVulnerabilityIDRx != "" && p.NegativeVulnerabilityIDRx.MatchString(vuln.VulnerabilityID) {
		return false
	}
	return p.VulnerabilityIDRx.MatchString(vuln.VulnerabilityID)
}

// SecurityScanPolicySet contains convenience functions for operating on a list
// of SecurityScanPolicy (like those found in Account.SecurityScanPoliciesJSON).
type SecurityScanPolicySet []SecurityScanPolicy

// GetSecurityScanPolicies deserializes this account's security scan policies
// and returns the subset that match the given repository.
func GetSecurityScanPolicies(account models.Account, repo models.Repository) (SecurityScanPolicySet, error) {
	if repo.AccountName != account.Name {
		// defense in depth
		panic(fmt.Sprintf(
			"Account.SecurityScanPoliciesFor called with repo.AccountName = %q, but a.Name = %q!",
			repo.AccountName, account.Name))
	}

	var policies SecurityScanPolicySet
	err := json.Unmarshal([]byte(account.SecurityScanPoliciesJSON), &policies)
	if err != nil {
		return nil, fmt.Errorf("cannot unmarshal SecurityScanPoliciesJSON for account %q: %w", account.Name, err)
	}

	var result SecurityScanPolicySet
	for _, p := range policies {
		if p.MatchesRepository(repo) {
			result = append(result, p)
		}
	}
	return result, nil
}

// PolicyForVulnerability returns the first policy from this set that matches
// the vulnerability, or nil if no policy matches.
func (s SecurityScanPolicySet) PolicyForVulnerability(vuln trivy.DetectedVulnerability) *SecurityScanPolicy {
	for _, p := range s {
		if p.MatchesVulnerability(vuln) {
			return &p
		}
	}
	return nil
}

// EnrichReport computes and inserts the "X-Keppel-Applicable-Policies" field
// if the report is `--format json`. Other formats are not allowed.
//
// This function also calculates the aggregate vulnerability status of the entire report,
// because it is the only place during a vulnerability check that holds the parsed report.
func (s SecurityScanPolicySet) EnrichReport(payload *trivy.ReportPayload, timeNow time.Time) (models.VulnerabilityStatus, error) {
	// first return value in case of error returns (this is declared here as a shorthand)
	errorStatus := models.ErrorVulnerabilityStatus

	if payload.Format != "json" {
		return errorStatus, fmt.Errorf("cannot run EnrichReport() on a ReportPayload with .Format = %q", payload.Format)
	}

	// decode relevant fields from report
	unmodifiedReport := &bytes.Buffer{}
	parsedReport, err := trivy.UnmarshalReportFromJSON(io.TeeReader(payload.Contents, unmodifiedReport))
	if err != nil {
		return errorStatus, fmt.Errorf("cannot parse Trivy vulnerability report: %w", err)
	}
	var statuses []models.VulnerabilityStatus
	// We do not check security reports which are EOSL (rotten) again, so we clear their Results to not deliver out of date information
	// see also doSecurityCheck()
	if parsedReport.Metadata.IsRotten() {
		statuses = append(statuses, models.RottenVulnerabilityStatus)

		metadataOs := parsedReport.Metadata.OS.UnwrapOr(trivy.ReportMetadataOS{
			Family: "unknown",
			Name:   "unknown",
		})
		parsedReport.AddField("Results", []trivy.ReportResult{{
			Class:  "os-pkgs",
			Target: fmt.Sprintf("%s (%s %s)", parsedReport.ArtifactName, metadataOs.Family, metadataOs.Name),
			Type:   metadataOs.Name,
			Vulnerabilities: []trivy.DetectedVulnerability{{
				Description:      "Keppel is not scanning this image anymore because the operating system of it is no longer supported by its vendor, please run trivy image manually if necessary.",
				LastModifiedDate: timeNow.Format(time.RFC3339),
				PublishedDate:    timeNow.Format(time.RFC3339),
				Severity:         "UNKNOWN",
				SeveritySource:   "Keppel",
				Status:           "affected",
				Title:            "Operating System is End-of-Life",
				VulnerabilityID:  "keppel:rotten-os",
			}},
		}})
		buf, err := parsedReport.MarshalJSON()
		if err != nil {
			return errorStatus, fmt.Errorf("cannot serialize rotten Trivy vulnerability report: %w", err)
		}
		payload.Contents = io.NopCloser(bytes.NewReader(buf))
	} else {
		// compute X-Keppel-Applicable-Policies set while also collecting constituent VulnerabilityStatus values
		applicablePolicies := make(map[string]SecurityScanPolicy)
		for _, result := range parsedReport.Results {
			for _, vuln := range result.Vulnerabilities {
				status, ok := trivy.MapToTrivySeverity[vuln.Severity]
				if !ok {
					return errorStatus, fmt.Errorf("vulnerability severity with name %q returned by Trivy is unknown and cannot be mapped", vuln.Severity)
				}

				policy := s.PolicyForVulnerability(vuln)
				if policy != nil {
					applicablePolicies[vuln.VulnerabilityID] = *policy
					status = policy.VulnerabilityStatus()
				}
				statuses = append(statuses, status)
			}
		}

		// remarshal report if it has changed
		if len(applicablePolicies) > 0 {
			parsedReport.AddField("X-Keppel-Applicable-Policies", applicablePolicies)
			buf, err := parsedReport.MarshalJSON()
			if err != nil {
				return errorStatus, fmt.Errorf("cannot serialize enriched Trivy vulnerability report: %w", err)
			}
			payload.Contents = io.NopCloser(bytes.NewReader(buf))
		} else {
			payload.Contents = io.NopCloser(bytes.NewReader(unmodifiedReport.Bytes()))
		}
	}

	return models.MergeVulnerabilityStatuses(statuses...), nil
}
